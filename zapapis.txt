openapi: 3.0.0
info:
  version: '0.8'
  title: Zap APIs
  description: |
    HR Zap is a platform for automating the nitty gritty steps of the hiring process, like background checking and onboarding.

    These are the **Zap APIs**, for building custom zap types.

    HR Zap also has the **Order APIs**, which are for ordering and tracking zaps. i.e. as an applicant tracking system or reseller.
tags:
  - name: Regular APIs
    description: |
      Regular APIs live on HR Zap's servers, and are called by you. For example you could update the status on one of your zaps to "2/3 reference checks complete".
  - name: Webhooks
    description: |
      Webhook APIs live on your servers, and are called by HR Zap when interesting things happen. For example your setup webhook is called when a user installs your zap - inside your webhook you might e.g. verify the API key that the installer provided.

      To build the urls for its webhook calls, HR Zap concats the base url you entered on your zap type (e.g. https://yourdomain.com/yourwebhooks) with the relevant webhook url (e.g. /setup) to build the complete url (e.g. https://yourdomain.com/yourwebhooks/setup).
      
paths:

  /z/ping:
    get:
      tags:
        - Regular APIs
      summary: test API connectivity
      description: |
        Call the ping API to test basic connectivity test - that your server can call HR Zap's APIs. As long as your API auth is OK, you'll get a 200 code and a message back.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormattedMessage'
                
  /ping:
    get:
      tags:
        - Webhooks
      summary: test API connectivity
      description: |
        Call the ping API to test basic connectivity test - that HR Zap can call APIs on your server. You should pass back 200 status and a message.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormattedMessage'

  /z/zaps/{id}:
    parameters:
      - name: id
        in: path
        description: zap id
        required: true
        schema:
          type: string
    get:
      tags:
        - Regular APIs
      summary: Get a zap, by its id
      description: |
        Use this API to fetch the state of one of your zaps. You may not need this API, as you also get the zap's state in the incoming request to your zapCode webhook.

        The response will include all of the fields set so far by the zap's        workflow, and will include any secret account-scoped field (e.g. API credentials that the customer provided when installing your zap).
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zap'
    post:
      tags:
        - Regular APIs
      summary: 'Update the state of a zap, as identified by id'
      description: |
        Use this API to update HR Zap's state for your zap as things progress at
        your end.

        For example if you are a reference checking system you might set the
        status message to "3 of 4 referees complete". Once things have completed
        at your end, pass apiComplete and your new field values, (e.g the report
        document for your just completed reference check).
      responses:
        '200':
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZapAppStatus'
        description: |
          Your internal status for the zap.
        required: true

  /z/zaps/{id}/documentItems/{itemId}:
    parameters:
      - name: id
        in: path
        description: |
          The id of a zap.
        required: true
        schema:
          type: string
      - name: itemId
        in: path
        description: |
          The id of an item within a document field on the given zap.
        required: true
        schema:
          type: string
    get:
      tags:
        - Regular APIs
      summary: Get a single item from within a document field
      description: |
        Use this API to fetch the binary data for a single item within a document field, e.g. an image of the front of a driver licence.
      responses:
        200:
          description: successful operation
          content:
            image/png:
              schema:
                type: string
                format: binary      
            image/jpeg:
              schema:
                type: string
                format: binary      
            application/pdf:
              schema:
                type: string
                format: binary      

  /z/zaps/{id}/signatureItems/{itemId}:
    parameters:
      - name: id
        in: path
        description: |
          The id of a zap.
        required: true
        schema:
          type: string
      - name: itemId
        in: path
        description: |
          The id of a signature field that is interacted with by the zap.
        required: true
        schema:
          type: string
    get:
      tags:
        - Regular APIs
      summary: Get a signature item, i.e. raw binary data of the signature image
      description: |
        Use this API to fetch the binary data for the signature image.
      responses:
        200:
          description: successful operation
          content:
            image/png:
              schema:
                type: string
                format: binary      


  /setup:
    post:
      tags:
        - Webhooks
      summary: Called when a user installs, uninstalls or checks on the health of your zap.
      description: |
        Your zap setup webhook is called when a user installs,
        uninstalls or checks on the health of your zap.
  
        You might use this to do housekeeping in your own system. For example you could access your customer's API key from its account-scoped field, and then make a test API call.

        When your setup webhook is called for an install, you can force the install to fail by passing back any http status other than 200 or 404.

        You can pass back some markdown that HR Zap can display to the user installing your app, e.g. a welcome message or a "bad API key" message.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormattedMessage'
        400:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormattedMessage'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetupPackage'
        required: true

  /fieldValuesRequest:
    post:
      tags:
        - Webhooks
      summary: Called when a user is on the order page for your zap
      description: |
        Your field values webhook is called by HR Zap at zap order time to ask you for all possible values for one of your fields.
  
        For example maybe your zap is a reference checking product, and each of your
        customers has their own unique set of reference checks like this:
  
        - IT reference check
  
        - Senior mgmt ref check
  
        - Call centre ref check
  
        Your customer needs to be able to choose their desired reference check type in a dropdown when ordering yiour zap - to populate that dropdown, HR Zap calls your webhook.

        **Troubleshooting** If your webhook is not being called, check that
  
        - the field is zap-scoped
  
        - it is marked as API-backed
  
        - it is a select list
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldValuesRequestPackage'
        required: true
        
  /validate:
    post:
      tags:
        - Webhooks
      summary: Called when a workflow participant clicks Save on their workflow page.
      description: |
        Your zap validate webhook is called when a user (or the individual)
        completes their step in the workflow by clicking "I agree".

        The request contains both the zap's current state and the user's
        desired state.

        Your webhook can do any validation it likes on the desired state. For example you could check that the individual has provided at least
        one form of photo id by lokking at the diffferent file upload fields they provided.

        To fail validation, return 400 and a message in your response. HR
        Zap will display the message to the user and prevent them from
        proceeding.

        To pass validation, i.e. there are no errors, return 200.
      responses:
        '200':
          description: All good
        '400':
          description: Something's wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormattedMessage'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZapValidatePackage'
        description: >
          The role holder's data entry (what they want to set the zap's fields
          to)
        required: true
      
  /zapCode:
    post:
      tags:
        - Webhooks
      summary: Called when one of your zaps reaches an API step in the workflow.
      description: |
        Your zap code webhook is called when one of your zaps reaches an API
        step in its workflow.
  
        Your code should do your processing and then pass back some field values
        (e.g. if you are a reference checking product, pass back the report).

        If you can't complete your processing immediately (maybe it will take
        days), then respond with ZapAppStatus.apiComplete == false, and then
        keep calling POST /z/zaps/{} each time you have an update
        for the zap, until finally you are apiComplete.
      responses:
        '200':
          description: Zap processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZapAppStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zap'
        description: |
          The API role holder has been reached, now it's time for the API to do
          its thing.
  
          The request contains the zap's state, as set up by the previous role
          holders.
  
          Your code should pass back the new state for the zap. You can only
          modify fields that were mapped to your zap in the zap config screen.
        required: true
        
components:

  schemas:
  
    CurrentWorkflowStep:
      type: object
      properties:
        sequence:
          description: the 0-based index of the current step within the workflow
          example: 2
          type: integer
        role:
          description: the role associated with the current step
          example: Individual
          type: string

    Zap:
      type: object
      description: |
        The current state of a zap's fields, as held on the account, the zap or
        one of the role holders (a user or the the individual).
      properties:
        id:
          type: string
          example: 1a0b68ea-2987-47c0-8787-133638dd5081
        zapTypeId:
          type: string
          example: 765ed33-2987-47c0-8787-13d5081
        currentWorkflowStep:
          $ref: '#/components/schemas/CurrentWorkflowStep'
        zapData:
          $ref: '#/components/schemas/ZapData'

          
    ZapData:
      type: object
      description: |
        A set of field values for a zap.
        
        This could be for example the desired state for a workflow step - i.e. what the role holder has
        entered into their mapped fields - as passed to the validate API.
        
        When the current step in the workflow is "Individual" there will be just one role holder in the roleHolders element. For example, an individual can't set the hiring manager's name.

        When the current step in the workflow is anyone else (like "Hiring manager") then there may be multiple role holders in the roleHolders element. For example, a hiring manager CAN set their own name and also the individual's salary)
      properties:
        rolesFields:
          type: array
          items:
            $ref: '#/components/schemas/RoleFields'
        accountFields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        zapFields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
          
    ZapValidatePackage:
      type: object
      description: |
        The information neede to validate a role holder's data entry, including
        - the current state of the zap (the work of all previous role holders)
        - the desired new state of the zap (as set by the current role holder)
      properties:
        zap:
          $ref: '#/components/schemas/Zap'
        zapUpdate:
          $ref: '#/components/schemas/ZapData'

    SetupPackage:
      type: object
      properties:
        webhookContext:
          $ref: '#/components/schemas/ZapWebhookContext'
        operation:
          type: string
          description: |
            What the account is doing with your zap
          enum:
            - INSTALL
            - HEALTHCHECK
            - UNINSTALL
          default: INSTALL

    FieldValuesRequestPackage:
      type: object
      properties:
        webhookContext:
          $ref: '#/components/schemas/ZapWebhookContext'
        fieldName:
          type: string
          description: |
            the name of the field which HR Zap wants the possible values for
          example: ReferenceCheckType
          
    ZapWebhookContext:
      type: object
      description: |
        Data needed for a zap endpoint to do its thing.
      properties:
        accountId:
          description: the account that is working with your zap
          type: string
          example: 5533dce69-639e-4864-bc01-fbf499c03442
        accountFields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
          
    ZapAppStatus:
      type: object
      required:
        - apiComplete
        - zapComplete
        - statusString
      properties:
        apiCompleteEta:
          type: string
          format: date
          description: |
            If your API processing is not yet complete, then when you reckon it
            will be (ISO 8601).
        apiComplete:
          type: boolean
          example: true
          description: |
            True to signal that your API processing is complete. HR Zap will
            start the next step in the workflow (if any), unless you also passed
            zapComplete.

            You can update any of the role's mapped fields (e.g. the report documen) by attaching a zapUpdate.
        zapComplete:
          type: boolean
          example: true
          description: |
            true to signal that the whole zap is now complete. No more workflow
            stages will be invoked.
        zapUpdate:
          $ref: '#/components/schemas/ZapData'
        statusString:
          type: string
          description: >
            A string containing the zap's status in your system, which HR Zap
            will present to the user in text, table cells, etc.
          example: Sent to the Ministry of Justice

    FormattedMessage:
      type: object
      properties:
        message:
          type: string
          format: markdown
          description: |
            A markdown message, with newlines as \n.
          example: The message goes here

    RoleFields:
      type: object
      properties:
        role:
          description: the name of a role within the zap workflow
          example: Individual
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
          
    Field:    
      description: |
        Fields have a scope.
        
        Example account-scoped fields..
        - Employer IRD
        - Vendor API key
        
        Example individual-scoped fields..
        - names
        - previous addresses
        - employment start date
        
        Example user-scoped fields..
        - phone number
        - job title
        
        Example zap-scoped fields..
        - MoJ check priority
      
      oneOf:     # each field may be a different type
        - $ref: '#/components/schemas/StringField'
        - $ref: '#/components/schemas/IntegerField'
        - $ref: '#/components/schemas/FloatField'
        - $ref: '#/components/schemas/MoneyField'
        - $ref: '#/components/schemas/DateField'
        - $ref: '#/components/schemas/BooleanField'
        - $ref: '#/components/schemas/EmailField'
        - $ref: '#/components/schemas/PhoneField'
        - $ref: '#/components/schemas/IRDField'
        - $ref: '#/components/schemas/NameField'
        - $ref: '#/components/schemas/ReadSignatureField'
        - $ref: '#/components/schemas/WriteSignatureField'
        - $ref: '#/components/schemas/AddressField'
        - $ref: '#/components/schemas/ReadDocumentField'
        - $ref: '#/components/schemas/WriteDocumentField'
      discriminator:
        propertyName: fieldType

    FieldType:
      type: string
      description: |
        What type of field this is
      enum:
        - STRING
        - INTEGER
        - FLOAT
        - MONEY
        - DATE
        - BOOLEAN
        - EMAIL
        - PHONE
        - NAME
        - READ_SIGNATURE
        - WRITE_SIGNATURE
        - ADDRESS
        - READ_DOCUMENT
        - WRITE_DOCUMENT

    StringField:
      type: object
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
          example: referenceType
        value:
          type: string
          description: Value for a string field or select list field
          example: General reference check

    DateField:
      type: object
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
          example: dateOfBirth
        value:
          type: string
          description: Value for a date field in ISO 8601 format
          example: 2021-02-08T21:10:25+0000
          
    IntegerField:
      type: object
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
          example: hoursPerMonth
        value:
          type: number
          description: Value for an integer field (no decimal places)
          example: 82

    FloatField:
      type: object
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
          example: averageTemperature
        value:
          type: number
          description: Value for a floating point number field
          example: 82.453444

    MoneyField:
      type: object
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
          example: requiredAnnualSalary
        value:
          type: object
          description: Value for a money field (holding amount + currency)
          properties:
            amount:
              type: number
              format: float
            currency:
              type: string
              description: A valid 3 character currency code as per ISO 4217
              enum:
                - AFN
                - EUR
                - ALL
                - DZD
                - USD
                - EUR
                - AOA
                - XCD
                - ARS
                - AMD
                - AWG
                - AUD
                - EUR
                - AZN
                - BSD
                - BHD
                - BDT
                - BBD
                - BYN
                - EUR
                - BZD
                - XOF
                - BMD
                - INR
                - BTN
                - BOB
                - BOV
                - USD
                - BAM
                - BWP
                - NOK
                - BRL
                - USD
                - BND
                - BGN
                - XOF
                - BIF
                - CVE
                - KHR
                - XAF
                - CAD
                - KYD
                - XAF
                - XAF
                - CLP
                - CLF
                - CNY
                - AUD
                - AUD
                - COP
                - COU
                - KMF
                - CDF
                - XAF
                - NZD
                - CRC
                - XOF
                - HRK
                - CUP
                - CUC
                - ANG
                - EUR
                - CZK
                - DKK
                - DJF
                - XCD
                - DOP
                - USD
                - EGP
                - SVC
                - USD
                - XAF
                - ERN
                - EUR
                - SZL
                - ETB
                - EUR
                - FKP
                - DKK
                - FJD
                - EUR
                - EUR
                - EUR
                - XPF
                - EUR
                - XAF
                - GMD
                - GEL
                - EUR
                - GHS
                - GIP
                - EUR
                - DKK
                - XCD
                - EUR
                - USD
                - GTQ
                - GBP
                - GNF
                - XOF
                - GYD
                - HTG
                - USD
                - AUD
                - EUR
                - HNL
                - HKD
                - HUF
                - ISK
                - INR
                - IDR
                - XDR
                - IRR
                - IQD
                - EUR
                - GBP
                - ILS
                - EUR
                - JMD
                - JPY
                - GBP
                - JOD
                - KZT
                - KES
                - AUD
                - KPW
                - KRW
                - KWD
                - KGS
                - LAK
                - EUR
                - LBP
                - LSL
                - ZAR
                - LRD
                - LYD
                - CHF
                - EUR
                - EUR
                - MOP
                - MKD
                - MGA
                - MWK
                - MYR
                - MVR
                - XOF
                - EUR
                - USD
                - EUR
                - MRU
                - MUR
                - EUR
                - XUA
                - MXN
                - MXV
                - USD
                - MDL
                - EUR
                - MNT
                - EUR
                - XCD
                - MAD
                - MZN
                - MMK
                - NAD
                - ZAR
                - AUD
                - NPR
                - EUR
                - XPF
                - NZD
                - NIO
                - XOF
                - NGN
                - NZD
                - AUD
                - USD
                - NOK
                - OMR
                - PKR
                - USD
                - PAB
                - USD
                - PGK
                - PYG
                - PEN
                - PHP
                - NZD
                - PLN
                - EUR
                - USD
                - QAR
                - EUR
                - RON
                - RUB
                - RWF
                - EUR
                - SHP
                - XCD
                - XCD
                - EUR
                - EUR
                - XCD
                - WST
                - EUR
                - STN
                - SAR
                - XOF
                - RSD
                - SCR
                - SLL
                - SGD
                - ANG
                - XSU
                - EUR
                - EUR
                - SBD
                - SOS
                - ZAR
                - SSP
                - EUR
                - LKR
                - SDG
                - SRD
                - NOK
                - SEK
                - CHF
                - CHE
                - CHW
                - SYP
                - TWD
                - TJS
                - TZS
                - THB
                - USD
                - XOF
                - NZD
                - TOP
                - TTD
                - TND
                - TRY
                - TMT
                - USD
                - AUD
                - UGX
                - UAH
                - AED
                - GBP
                - USD
                - USD
                - USN
                - UYU
                - UYI
                - UYW
                - UZS
                - VUV
                - VES
                - VND
                - USD
                - USD
                - XPF
                - MAD
                - YER
                - ZMW
                - ZWL
                - XBA
                - XBB
                - XBC
                - XBD
                - XTS
                - XXX
                - XAU
                - XPD
                - XPT
                - XAG

    BooleanField:
      type: object
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
          example: overtimeExempt
        value:
          type: boolean
          description: Value for a boolean field
          example: true

    EmailField:
      type: object
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
          example: email
        value:
          type: string
          description: an email address
          example: fred@bloggs.com

    IRDField:
      type: object
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          type: string
          example: IRDField
        fieldName:
          type: string
          example: irdnumber
        value:
          type: string
          description: Value for an NZ IRD field
          example: 12344370

    PhoneField:
      type: object
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          type: string
          example: PhoneField
        fieldName:
          type: string
          example: homePhoneNumber
        value:
          type: string
          description: Value for a phone number field, as stored in E.164 format
          example: +442071838750  

    NameField:
      type: object
      description: |
        A NameField stores a persons name, broken into its individual components.
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
          example: name
        value:
          type: object
          properties:
            firstName:
              type: string
              example: Fred
            middleNames:
              type: string
              example: Vader
            lastName:
              type: string
              example: Bloggs

    ReadSignatureField:
      type: object
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
          example: signature
        value:
          $ref: '#/components/schemas/ReadSignatureItem'

    ReadSignatureItem:
      type: object
      description: |
        Data about a signature, all but the data itself
      required:
        - id
        - fileSize
      properties:
        id:
          type: string
          example: 4ef96c2c-55bb-4809-8336-59daad4f0974
          description: | 
            An unguessable key used to stream the binary data for the signature via GET /z/zaps/{}/signatureItems/{}
        fileSize:
          $ref: '#/components/schemas/FileSize'

    WriteSignatureField:
      type: object
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
          example: signature
        value:
          $ref: '#/components/schemas/WriteSignatureItem'

    WriteSignatureItem:
      type: object
      description: |
        Data for a signature
      required:
        - value
      properties:
        value:
          type: string
          format: base64
          example: blahy4645y95jrfjfjr49904jrf04jk
          description: | 
            The binary data for the image in png format

    AddressField:
      type: object
      description: |
        An AddressField stores an address in the same format as returned by Google's geocoding responses (https://developers.google.com/maps/documentation/geocoding/overview#GeocodingResponses). The values field is an array containing the same content that would be found in the address_components element of the Google response (see example at https://developers.google.com/places/web-service/details#PlaceDetailsResponses)
      required:
        - fieldType
        - fieldName
        - value
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
          example: homeAddress
        value:
          type: array
          items:
            type: object
            properties:
              long_name:
                type: string
                example: Santa Clara County
              short_name:
                type: string
                example: Santa Clara County
              types:
                type: array
                description: |
                  See https://developers.google.com/places/web-service/supported_types#table2 for the source list
                items:
                  enum: [administrative_area_level_1,administrative_area_level_2,administrative_area_level_3,administrative_area_level_4,administrative_area_level_5,archipelago,colloquial_area,continent,country,establishment,finance,floor,food,general_contractor,geocode,health,intersection,landmark,locality,natural_feature,neighborhood,place_of_worship,plus_code,point_of_interest,political,post_box,postal_code,postal_code_prefix,postal_code_suffix,postal_town,premise,room,route,street_address,street_number,sublocality,sublocality_level_1,sublocality_level_2,sublocality_level_3,sublocality_level_4,sublocality_level_5,subpremise,town_square]

    ReadDocumentField:
      type: object
      required:
        - fieldType
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
        value:
          type: array
          items:
            $ref: '#/components/schemas/ReadDocumentItem'

    WriteDocumentField:
      type: object
      required:
        - fieldType
        - items
      properties:
        fieldType:
          $ref: '#/components/schemas/FieldType'
        fieldName:
          type: string
        value:
          type: array
          items:
            $ref: '#/components/schemas/WriteDocumentItem'

    ReadDocumentItem:
      type: object
      description: |
        A single item within a document field - e.g. an image of the front of the individual's driver licence.
      required:
        - id
        - itemMimeType
      properties:
        id:
          type: string
          example: 4ef96c2c-55bb-4809-8336-59daad4f0974
          description: | 
            An unguessable key used to stream the binary data for the document via GET /z/zaps/{}/documentItems/{}
        mimeType:
          $ref: '#/components/schemas/MimeType'
        fileName:
          $ref: '#/components/schemas/FileName'
        fileSize:
          $ref: '#/components/schemas/FileSize'


    WriteDocumentItem:
      type: object
      description: |
        A single item within a document field - e.g. an image of the front of the individual's driver licence.
      required:
        - value
        - mimeType
      properties:
        value:
          type: string
          format: base64
          example: RGlkIHlvdSBtZWFuOiBiYXNlNjQgZW5jb2RlCgoKQmFzZTY0IEVuY29kZS..
          description: | 
            Base64-encoded binary data for the document.
        mimeType:
          $ref: '#/components/schemas/MimeType'
        fileName:
          $ref: '#/components/schemas/FileName'

    MimeType:
      description: The mimeType for the document
      enum: [ application/pdf, image/png, image/jpeg ]

    FileName:
      type: string
      description: the document's file name (name only, excluding the path)
      example: nursing-certificate-Bela-Lugosi.pdf
    
    FileSize:
      type: integer
      description: the document's file size in bytes
      example: 23887